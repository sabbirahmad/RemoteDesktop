/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package my.RemoteDesktop;


import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author sabbir
 */
public class ServerMessenger extends javax.swing.JFrame implements Runnable{

    private ServerSocket server;
    private Socket serverSocket;//new socket for receiving image
    private ObjectInputStream input;//input data
    private ObjectOutputStream output;//input data
    private Thread messenger;//thread for this class
    private String ownMessage;//storing own message
    private String message;//store message from client
    
    static boolean connected=false;//check for connection
    private String name;//to store alias
    
    int port;//keeps port
    
    /**
     * Creates new form ServerMessenger
     */
    //constructor ServerMessenger() begin
    public ServerMessenger(int port) throws IOException
    {
        initComponents();
        
        this.port=port;//sets port
        
        //System.out.println("Messenger\n");
        messenger=new Thread(this);//creating the thread
        messenger.start();///starting the thread) {
    }//end constructor ServerMessenger()
    
    //method run() begin
    @Override
    public void run()
    {
        try {
            server=new ServerSocket(port);//set server port for connection
        }//end try 
        catch (IOException ex) {
            Logger.getLogger(ServerMessenger.class.getName()).log(Level.SEVERE, null, ex);
        }//end catch
        try {
            createConnection();//create new connection
        }//end try 
        catch (IOException ex) {
            Logger.getLogger(ServerMessenger.class.getName()).log(Level.SEVERE, null, ex);
        }//end catch
        try {
            getMessage();//calls getMessage to receivemessage
        }//end try 
        catch (IOException ex) {
            Logger.getLogger(ServerMessenger.class.getName()).log(Level.SEVERE, null, ex);
        }//end catch
    }//end method run()
    
    //method createConnection() begin
    private void createConnection() throws IOException
    {
        serverSocket=server.accept();//accept request from client
        connected=true;
        //System.out.println("Connection established-messenger");
        getStreams();//get input and output stream
    }//end method createConnection()
    
    //method getStreams() begin
    private void getStreams() throws IOException //get streams to send and receive data
    {
        output=new ObjectOutputStream(serverSocket.getOutputStream());//setup output stream connection
        
        input=new ObjectInputStream(serverSocket.getInputStream());//setup input stream connection
        
    }//end method getStreams
    
    //method getMessage() begin
    private void getMessage() throws IOException
    {
        while(true)//loop runs through out the connection
        {
            try
            {
                name=(String)input.readObject();//read alias from client
                message=(String)input.readObject();//reads message
                if(message!=null)//shows messenger for new message
                {
                    this.setVisible(true);
                }//end if
                chatShowArea.append(name+": ");//appends name to text area
                chatShowArea.append(message+"\n");//appends message
            }//end try
            catch(ClassNotFoundException classExcept)
            {
                classExcept.printStackTrace();
            }//end catch
        }//end while
    }//end method getMessage()
    
    //method send Message() begin
    private void sendMessage(String messageSend) throws IOException
    {
        output.writeObject(messageSend);//writes message to client
        output.flush();//flushes output
    }//end method sendMessage

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chatShowScroll = new javax.swing.JScrollPane();
        chatShowArea = new javax.swing.JTextArea();
        chatWriteField = new javax.swing.JTextField();
        messengerMenu = new javax.swing.JMenuBar();

        setName("serverMessenger");

        chatShowScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        chatShowArea.setColumns(20);
        chatShowArea.setEditable(false);
        chatShowArea.setLineWrap(true);
        chatShowArea.setRows(5);
        chatShowArea.setWrapStyleWord(true);
        chatShowScroll.setViewportView(chatShowArea);

        chatWriteField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatWriteFieldActionPerformed(evt);
            }
        });
        setJMenuBar(messengerMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(chatWriteField)
                    .addComponent(chatShowScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(chatShowScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatWriteField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chatWriteFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatWriteFieldActionPerformed
        // TODO add your handling code here:    
        if(evt.getSource()==chatWriteField){
            ownMessage=String.format("%s",evt.getActionCommand());//message from textField
            chatShowArea.append(RemoteDesktop.alias+": ");//appends name to textarea
            chatShowArea.append(ownMessage+"\n");//appends message
            chatWriteField.setText(null);//clears textField
            try {
                sendMessage(RemoteDesktop.alias);//send name to client
                sendMessage(ownMessage);//send message
            }//end try 
            catch (IOException ex) {
                Logger.getLogger(ServerMessenger.class.getName()).log(Level.SEVERE, null, ex);
            }//end catch
        }//end if
    }//GEN-LAST:event_chatWriteFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    /*
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerMessenger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerMessenger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerMessenger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerMessenger.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /*
         * Create and display the form
         */
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ServerMessenger().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatShowArea;
    private javax.swing.JScrollPane chatShowScroll;
    private javax.swing.JTextField chatWriteField;
    private javax.swing.JMenuBar messengerMenu;
    // End of variables declaration//GEN-END:variables
}
