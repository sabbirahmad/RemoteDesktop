/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package my.RemoteDesktop;

import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author sabbir
 */
public class ComputersAndContacts extends javax.swing.JFrame implements Runnable{

    private Scanner logFile;
    private String[] whiteList;
    private String[] blackList;
    
    private int whiteListLength;
    private int blackListLength;
    
    private Thread computer;
    
    
    public ComputersAndContacts()
    {
        computersAndContacts();
        initCompontents();
        
        
        computer=new Thread(this);//assigning thread
        computer.start();//starting thread
    }
    
    @Override
    public void run() {
        //throw new UnsupportedOperationException("Not supported yet.");
        //System.out.println("computers");
        //computersAndContacts();
    }
    
    public void initCompontents()
    {
        comp=new JFrame();
        comp.setDefaultCloseOperation(HIDE_ON_CLOSE);
        comp.setSize(200, 320);
        comp.setTitle("Computers");
        
        compScroll=new JScrollPane();
        comp.add(compScroll);
        
        //whiteList tree
        root=new DefaultMutableTreeNode("List");
        whiteListNode=new DefaultMutableTreeNode("White List");
        root.add(whiteListNode);
        
        blackListNode=new DefaultMutableTreeNode("Black List");
        root.add(blackListNode);
        
        createNode(whiteListNode,whiteListLength);
        createNode(blackListNode,blackListLength);
        
        treeModel=new DefaultTreeModel(root);
        tree=new JTree(treeModel);
        
        tree.setRootVisible(false);
        
        compScroll.setViewportView(tree);
        
    }
    
    
    private void createNode(DefaultMutableTreeNode root, int listLength)
    {
        int length=0;
        while(length<listLength)
        {
            DefaultMutableTreeNode node=new DefaultMutableTreeNode(whiteList[length]);
            root.add(node);
            length++;
        }
        
    }
    
    private void computersAndContacts()
    {
        whiteList=new String[100];
        blackList=new String[100];
        
        openFile("whitelist.log");
        whiteListLength=setListString(whiteList);
        closeFile();
        //System.out.println("whitelist:");
        //printString(whiteListLength,whiteList);
        
        openFile("blacklist.log");
        blackListLength=setListString(blackList);
        closeFile();
        //System.out.println("blacklist:");
        //printString(blackListLength,blackList);
    }
    
    
    private void openFile(String fileName)
    {
        try {
            logFile=new Scanner(new File(fileName));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ComputersAndContacts.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void closeFile()
    {
        if(logFile!=null)
        {
            logFile.close();
        }
    }
    
    
    
    private int setListString(String[] list)
    {
        int length=0;
        try
        {
            while(logFile.hasNext())
            {
                list[length++]=logFile.next();
            }
        }
        catch(NoSuchElementException elementException)
        {
            System.out.println("Error reading 1.");
            logFile.close();
        }
        catch(IllegalStateException stateException)
        {
            System.out.println("Error reading 2.");
        }
        return length;
    }
    
    
    private void printString(int length,String[] list)
    {
        while(length!=0)
        {
                System.out.println(list[--length]);
        } 
    }
    
    public static void showAndHideComp(boolean show)
    {
        comp.setVisible(show);
    }

    
    
    //swing variable declaration
    
    private static JFrame comp;
    private JScrollPane compScroll;
    //private JPanel compPanel;
    private DefaultMutableTreeNode root;
    private DefaultMutableTreeNode whiteListNode;
    private DefaultMutableTreeNode blackListNode;
    private DefaultTreeModel treeModel;
    private JTree tree;
    
    //end variable declaration
}

/*
class MyTreeModelListener implements TreeModelListener
{
    
}
*/